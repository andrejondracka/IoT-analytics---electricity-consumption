{
    "collab_server" : "",
    "contents" : "library(RMySQL)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(makeR)\nlibrary(forecast)\nlibrary(prophet)\nlibrary(Metrics)\n\n####load data and merge, transform, rename####\n\ncon = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!', dbname='dataanalytics2018', host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')\n\ndbListTables(con)\ndbListFields(con, 'yr_2009')\n\nyr_2006 <- dbGetQuery(con, \"SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2006\")\nyr_2007 <- dbGetQuery(con, \"SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2007\")\nyr_2008 <- dbGetQuery(con, \"SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2008\")\nyr_2009 <- dbGetQuery(con, \"SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2009\")\nyr_2010 <- dbGetQuery(con, \"SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2010\")\n\nmeter_data <- rbind(yr_2007, yr_2008, yr_2009, yr_2010)\n\nmeter_data$Global_active_power <- meter_data$Global_active_power *100/6\nmeter_data$Other <- meter_data$Global_active_power - meter_data$Sub_metering_1 - meter_data$Sub_metering_2 - meter_data$Sub_metering_3\ncolnames(meter_data)[c(3:7)] <- c('Total','Kitchen','Laundry Room','Hot water/AC','Other')\n\n\n####read date and time and gather the DF\n\nmeter_data <-cbind(meter_data,paste(meter_data$Date,meter_data$Time), stringsAsFactors=FALSE)\ncolnames(meter_data)[8] <-\"DateTime\"\nmeter_data <- meter_data[,c(ncol(meter_data), 1:(ncol(meter_data)-1))]\nmeter_data$DateTime <- as.POSIXct(meter_data$DateTime, \"%Y/%m/%d %H:%M:%S\")\nattr(meter_data$DateTime, \"tzone\") <- \"Europe/Paris\"\n\nmeter_data$Weekday <- factor(lubridate::wday(meter_data$DateTime, week_start = 1, label = TRUE))\nmeter_data$Week <- lubridate::isoweek(meter_data$DateTime)\nmeter_data$Year <- lubridate::year(meter_data$DateTime)\nmeter_data$Month <- lubridate::month(meter_data$DateTime)\nmeter_data$Day <- lubridate::day(meter_data$DateTime)\nmeter_data$Hour <- lubridate::hour(meter_data$DateTime)\nmeter_data$Minute <- lubridate::minute(meter_data$DateTime)\nmeter_data$Date <- strftime(meter_data$DateTime, format= \"%F\")\nmeter_data$Time <- strftime(meter_data$DateTime, format= \"%H:%M\")\n\nmeter_data_test <- meter_data[meter_data$Year == 2010,]\nmeter_data_train <- meter_data[meter_data$Year != 2010,]\n\n####make some plots####\n\n#a calendar with total consumption\nmeter_total_byday <- meter_data %>% group_by(Date, Year, Month, Day) %>% \n  summarize(Total = sum(Total)/1000, \n            Kitchen = sum(Kitchen)/1000, \n            `Laundry Room` = sum(`Laundry Room`)/1000, \n            `Hot water/AC` = sum(`Hot water/AC`)/1000,\n            Other = sum(Other)/1000)\n\ncalendarHeat(meter_total_byday$Date, meter_total_byday$Total, varname = 'Total Consumption')\n\nmeter_total_byday <- subset(meter_total_byday, Year < 2010)\n\ncalendarHeat(meter_total_byday$Date, meter_total_byday$Kitchen, varname = 'Kitchen Consumption')\ncalendarHeat(meter_total_byday$Date, meter_total_byday$`Laundry Room`, varname = 'Laundry Room')\ncalendarHeat(meter_total_byday$Date, meter_total_byday$`Hot water/AC`, varname = 'Hot water/AC')\ncalendarHeat(meter_total_byday$Date, meter_total_byday$Other, varname = 'Other')\n\n##pie chart of energy consumption on august 2008 day\naugust19data <- data.frame(t(meter_total_byday[596,6:9]))\ncolnames(august19data) <- 'consumption'\naugust19data$submeter <- rownames(august19data)\n\nggplot(data = august19data, aes(x=\"\", y=consumption, fill=submeter)) + \n  geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +\n  theme(axis.text.x=element_blank())\n\n\nsumdata <- data.frame(apply(meter_total_byday[,6:9], 2, sum))\ncolnames(sumdata) <- 'consumption'\nsumdata$submeter <- rownames(sumdata)\nsumdata$cumul <- cumsum(sumdata$consumption)\n\nggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) + \n  geom_bar(stat = 'identity') +\n  theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption),\n                                                     y = consumption + 1000)) +\n  ylab('total consumption (kWh)')\n\n\n####granularizing the data####\n\ngranular_data <- list()\n\ngranular_data[['Hour']] <- meter_data %>% group_by(Year, Month, Day, Hour, Week, Weekday) %>% \n  summarize (Kitchen = sum(Kitchen)/1000, \n             `Laundry Room` = sum(`Laundry Room`)/1000, \n             `Hot water/AC` = sum(`Hot water/AC`)/1000, \n             Other = sum(Other)/1000, \n             Total = sum(Total)/1000)\ngranular_data$Hour$ds <- lubridate::ymd_h(paste(granular_data$Hour$Year, \n                                                granular_data$Hour$Month, \n                                                granular_data$Hour$Day, \n                                                granular_data$Hour$Hour))\n\ngranular_data[['Day']] <- meter_data %>% group_by(Year, Month, Day, Week, Weekday) %>% \n  summarize (Kitchen = sum(Kitchen)/1000, \n             `Laundry Room` = sum(`Laundry Room`)/1000, \n             `Hot water/AC` = sum(`Hot water/AC`)/1000, \n             Other = sum(Other)/1000, \n             Total = sum(Total)/1000)\ngranular_data$Day$ds <- lubridate::ymd(paste(granular_data$Day$Year, \n                                             granular_data$Day$Month, \n                                             granular_data$Day$Day))\n\ngranular_data[['Week']] <- meter_data %>% group_by(Year, Week) %>% \n  summarize (Kitchen = sum(Kitchen)/1000, \n             `Laundry Room` = sum(`Laundry Room`)/1000, \n             `Hot water/AC` = sum(`Hot water/AC`)/1000, \n             Other = sum(Other)/1000, \n             Total = sum(Total)/1000, \n             ds = min(DateTime))\n\ngranular_data[['Month']] <- meter_data %>% group_by(Year, Month) %>% \n  summarize (Kitchen = sum(Kitchen)/1000, \n             `Laundry Room` = sum(`Laundry Room`)/1000, \n             `Hot water/AC` = sum(`Hot water/AC`)/1000, \n             Other = sum(Other)/1000, \n             Total = sum(Total)/1000)\ngranular_data$Month$ds <- lubridate::ymd(paste(granular_data$Month$Year, \n                                               granular_data$Month$Month, \"1\"))\n\n#save(granular_data, file = 'granulardata.Rdata')\n\n\ngrans <- c('Hour','Day', 'Week', 'Month')\nrooms <- c('Kitchen', 'Laundry Room', 'Hot water/AC', 'Other')\n\ngranular_data_test <- lapply(granular_data, function(x) subset(x, Year == 2010))\ngranular_data <- lapply(granular_data, function(x) subset(x, Year != 2010))\n\n\n####prophet daily forecasts with and w/o holidays####\n\nprophetdataday <- list()\ntimedf <- granular_data[['Day']]$ds\nfor (i in rooms) {\n  prophetdataday[[i]] <- granular_data[['Day']][i]\n  prophetdataday[[i]] <- cbind(timedf, prophetdataday[[i]])\n  colnames(prophetdataday[[i]]) <- c('ds','y')\n}\n\n##without holidays\nprophet_nohol <- lapply(prophetdataday, prophet)\n#save(prophet_nohol, file = \"prophet_dailymodels_nohol.Rdata\")\n#load(\"prophet_dailymodels_nohol.Rdata\")\n\nfutures_nohol <- lapply(prophet_nohol, function(x) make_future_dataframe(x,periods = 365))\nforecast_nohol <- map2(prophet_nohol, futures_nohol, function(x,y) predict(x,y))\nforecast_nohol_futureonly <- lapply(forecast_nohol, \n                                    function(x) subset(x, lubridate::year(ds) == 2010, \n                                                       select = c(ds, yhat)))\n\n\n\n##with holidays\nprophet_h <- prophet(weekly.seasonality = TRUE, yearly.seasonality = TRUE)\nprophet_h <- add_country_holidays(prophet_h, country_name = 'France')\nprophet_hol <- lapply(prophetdataday, function(x) fit.prophet(m = prophet_h, df = x))\n#save(prophet_hol, file = \"prophet_dailymodels_hol.Rdata\")\n#load(\"prophet_dailymodels_hol.Rdata\")\n\nfutures_hol <- lapply(prophet_hol, function(x) make_future_dataframe(x,periods = 365))\nforecast_hol <- map2(prophet_hol, futures_hol, function(x,y) predict(x,y))\nforecast_hol_futureonly <- lapply(forecast_hol, \n                                  function(x) subset(x, lubridate::year(ds) == 2010, \n                                                     select = c(ds, yhat)))\n\nplot(prophet_hol$Kitchen, forecast_hol$Kitchen)\n\n\n####creating the test dataframes for 2010####\ntestdata <- list()\ntimedf <- as.POSIXct(granular_data_test[['Day']]$ds)\nfor (i in rooms) {\n  testdata[[i]] <- granular_data_test[['Day']][i]\n  testdata[[i]] <- cbind(timedf, testdata[[i]])\n  colnames(testdata[[i]]) <- c('ds','y')\n}\n\n\n####merge both hol and nohol predictions with testing data####\nrealpredicteddf <- list()\nrealpredicteddf <- map2(testdata, forecast_nohol_futureonly, \n                        function(x,y) merge(x,y, by='ds', all=TRUE))\nrealpredicteddf <- map2(realpredicteddf, forecast_hol_futureonly, \n                        function(x,y) merge(x,y, by='ds', all=TRUE))\nfor (i in rooms) {\n  realpredicteddf[[i]]$y[realpredicteddf[[i]]$y==0] <- 0.001\n}\n\nfor (i in rooms) {\n  colnames(realpredicteddf[[i]]) <- c('ds', 'y', 'prophet_nohol', 'prophet_hol')\n}\n\nplot(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$y, type='l')\nlines(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$prophet_nohol, col = 'red')\nlines(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$prophet_hol, col = 'blue')\n\n####plotting all the plots in a single ggplot\nrealpredicteddf_expand <- lapply(realpredicteddf, \n                                 function(x) pivot_longer(x, \n                                                          cols = -ds, \n                                                          names_to = 'model', \n                                                          values_to = 'y'))\nfor (i in rooms) {\n  realpredicteddf_expand[[i]]$meter <- i\n}\ndataexpanded <- do.call('rbind', realpredicteddf_expand)\n\na <- ggplot(data = dataexpanded, aes(x = ds, y = y, color = model)) + \n  geom_line() +\n  facet_grid(vars(meter)) +\n  scale_color_hue(labels = c('prophet with holidays', 'prophet', 'real data'))\na\n\n\n####calculating stats for prophet\nrealpredicteddf_narm <- lapply(realpredicteddf, na.omit)\nmodelstats <- data_frame(meter = rooms)\n\nmodelstats$nohol_rmse <- sapply(realpredicteddf_narm, \n                                function(x) Metrics::rmse(x$y, x$prophet_nohol))\nmodelstats$nohol_mae <- sapply(realpredicteddf_narm, \n                               function(x) Metrics::mae(x$y, x$prophet_nohol))\nmodelstats$nohol_mape <- sapply(realpredicteddf_narm, \n                                function(x) Metrics::mape(x$y + 1, x$prophet_nohol + 1))\nmodelstats$hol_rmse <- sapply(realpredicteddf_narm, \n                              function(x) Metrics::rmse(x$y, x$prophet_hol))\nmodelstats$hol_mae <- sapply(realpredicteddf_narm, \n                               function(x) Metrics::mae(x$y, x$prophet_hol))\nmodelstats$hol_mape <- sapply(realpredicteddf_narm, \n                                function(x) Metrics::mape(x$y + 1, x$prophet_hol + 1))\n\n\n\n####builting time series objects for other models\ngranular_data_hour_reduced <- granular_data[['Day']][,c('Kitchen','Laundry Room', 'Hot water/AC','Other')]\ngran_data_ts <- list()\ngran_data_ts2 <- list()\n\nfor (i in rooms){\n  gran_data_ts[[i]] = ts(granular_data[['Day']][i], start = 2007, frequency = 365)\n}\n\nfor (i in rooms){\n  gran_data_ts2[[i]] = ts(granular_data[['Day']][i], start = 2007, frequency = 7)\n}\n\n####linear models\nlinmodels <- lapply(gran_data_ts, function(x) tslm(x ~ trend + season))\nforecast_linmodels <- lapply(linmodels, function(x) forecast(x, h=365))\n\nforecast_linmodels_preds <- list()\nfor (i in rooms) {\n  forecast_linmodels_preds[[i]] <- as.data.frame(forecast_linmodels[[i]]$mean)\n  colnames(forecast_linmodels_preds[[i]]) <- 'linmodel'\n}\n\nforecast_linmodels_preds <- map2(realpredicteddf, forecast_linmodels_preds, cbind)\nforecast_linmodels_preds_narm <- lapply(forecast_linmodels_preds, na.omit)\n\n\n#linmodels stats\nmodelstats$linmodel_rmse <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::rmse(x$y, x$linmodel))\nmodelstats$linmodel_mae <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::mae(x$y, x$linmodel))\nmodelstats$linmodel_mape <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::mape(x$y + 1, x$linmodel + 1))\n\n\n####arima auto\nautoarimas <- lapply(list(Kitchen = gran_data_ts$Kitchen, \n                          `Laundry Room` = gran_data_ts$`Laundry Room`, \n                          `Hot water/AC` = gran_data_ts$`Hot water/AC`), \n                     function(x) auto.arima(x))\n  forecast_autoarimas <- lapply(autoarimas, function(x) forecast(x, h=365))\n\nforecast_autoarimas_preds <- list()\nfor (i in rooms[1:3]) {\n  forecast_autoarimas_preds[[i]] <- as.data.frame(forecast_autoarimas[[i]]$mean)\n  colnames(forecast_autoarimas_preds[[i]]) <- 'autoarima'\n}    \n\nrealpredicteddf2 <- list(Kitchen = realpredicteddf$Kitchen, \n                         `Laundry Room` = realpredicteddf$`Laundry Room`, \n                         `Hot water/AC` = realpredicteddf$`Hot water/AC`)\nforecast_autoarimas_preds <- map2(realpredicteddf2, forecast_autoarimas_preds, cbind)\nforecast_autoarimas_preds_narm <- lapply(forecast_autoarimas_preds, na.omit)\n\n#autoarima stats\nmodelstats$autoarima_rmse <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::rmse(x$y, x$autoarima)), 0)\nmodelstats$autoarima_mae <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::mae(x$y, x$autoarima)), 0)\nmodelstats$autoarima_mape <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::mape(x$y + 1, x$autoarima + 1)), 0)\n\n\n\n\n####holt-winters\nholtwinterss <- lapply(gran_data_ts, function(x) HoltWinters(x))\nforecast_holtwinters <- lapply(holtwinterss, function(x) forecast(x, h=365))\n\nforecast_holtwinters_preds <- list()\nfor (i in rooms) {\n  forecast_holtwinters_preds[[i]] <- as.data.frame(forecast_holtwinters[[i]]$mean)\n  colnames(forecast_holtwinters_preds[[i]]) <- 'holtwinters'\n}\n\nforecast_linmodels_preds <- map2(forecast_linmodels_preds, forecast_holtwinters_preds, cbind)\nforecast_linmodels_preds_narm <- lapply(forecast_linmodels_preds, na.omit)\n\nmodelstats$holtwinters_rmse <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::rmse(x$y, x$holtwinters)))\nmodelstats$holtwinters_mae <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::mae(x$y, x$holtwinters)))\nmodelstats$holtwinters_mape <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::mape(x$y + 1, x$holtwinters + 1)))\n\n\n\n\n\ntoexport <- granular_data$Month\ntoexport2 <- gather(toexport, key = 'meter', value = 'consumption', Kitchen, `Laundry Room`, `Hot water/AC`, `Other`)\ntoexport$id <- as.double(row.names(toexport))\nwrite.csv(toexport2, file = 'monthlydata2.csv')\n\n\n\n\nkitchen_day <- ts(gran_data_bymeter[['Day']][[\"Kitchen\"]]$consumption, frequency = 365, start = 2007)\nfit_kmin <- tslm(window(gran_data_tss[['Hour']][['Kitchen']],start = gran_data_tss[['Hour']][['Kitchen']][1], end=gran_data_tss[['Hour']][['Kitchen']][2000]) ~ trend + season)\nsummary(fit_kmin)\nforecast_kmin <- forecast(fit_kmin, h=500)\n\n\n####other stuff####\n\n# gran_data_tss <- list()\n# freqs <- c(365*24*60,365*24,365,12)\n# dff <- data_frame(grans,freqs)\n# \n# \n# for (i in 1:4) {\n#   for (j in c('Kitchen', 'Laundry Room', 'Hot water/AC', 'Other')) {\n#     gran_data_tss[[dff$grans[i]]][[j]] <- ts(gran_data_bymeter[[i]][[j]]$consumption, frequency = dff$freqs[i], start = 2007)\n#   }\n# }\n\n\n##generating time series data example\nkitchen_day <- ts(gran_data_bymeter[['Day']][[\"Kitchen\"]]$consumption, frequency = 365, start = 2007)\nkitchen_month <- ts(gran_data_bymeter[['Month']][[\"Kitchen\"]]$consumption, frequency = 12, start = 2007)\nlaundry_month <- ts(gran_data_bymeter[['Month']][[\"Laundry Room\"]]$consumption, frequency = 12, start = 2007)\n\n####time series fit####\n\ngran_data_tss$Minute$Kitchen\nfit_kd <- tslm(gran_data_tss$Day$Kitchen ~ trend + season)\nsummary(fit_kd)\nforecast_kd <- forecast(fit_kd, h=50)\nplot(forecast_kd)\n\nfit_km <- tslm(gran_data_tss[['Month']][['Kitchen']] ~ trend + season)\nsummary(fit_km)\nforecast_km <- forecast(fit_km, h=50)\nplot(forecast_km)\n\nfit_kmin <- tslm(window(gran_data_tss[['Hour']][['Kitchen']],start = gran_data_tss[['Hour']][['Kitchen']][1], end=gran_data_tss[['Hour']][['Kitchen']][2000]) ~ trend + season)\nsummary(fit_kmin)\nforecast_kmin <- forecast(fit_kmin, h=500)\nplot(forecast_kmin)\n\nfit_lm <- tslm(laundry_month ~ trend + season)\nsummary(fit_lm)\nforecast_lm <- forecast(fit_lm, h=50)\nplot(forecast_lm)\n\n\n\n\nkitchen_mont2 <- gran_data_bymeter[['Month']][[\"Kitchen\"]]$consumption\nkitchen_mont3 <- gran_data_bymeter[['Month']][[\"Kitchen\"]]$Month\nkmtest <- data_frame(kitchen_mont3,kitchen_mont2)\nkmgr <- kmtest %>% group_by(kitchen_mont3) %>% summarize(cons = mean(kitchen_mont2))\nplot(kmgr$cons, type = 'l')\n\n\n####prophecy####\nmeter_total_byday$Date <- as.POSIXct(meter_total_byday$Date)\nmeter_total_byday_pr <- meter_total_byday[,c(1,5)]\ncolnames(meter_total_byday_pr) <- c('ds','y')\n\nprophettest <- prophet(meter_total_byday_pr)\n\nfuture <- make_future_dataframe(prophettest, periods = 365)\nforecast <- predict(prophettest,future)\n\nplot(prophettest, forecast)\n",
    "created" : 1571837204322.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "807893829",
    "id" : "A8F4895E",
    "lastKnownWriteTime" : 1573209201,
    "last_content_update" : 1573209201288,
    "path" : "~/Documents/ubiqum/module3_prediction/code.R",
    "project_path" : "code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}