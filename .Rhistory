colnames(meter_data)[c(3:7)] <- c('Total','Kitchen','Laundry Room','Hot water/AC','Other')
meter_data <-cbind(meter_data,paste(meter_data$Date,meter_data$Time), stringsAsFactors=FALSE)
colnames(meter_data)[8] <-"DateTime"
meter_data <- meter_data[,c(ncol(meter_data), 1:(ncol(meter_data)-1))]
meter_data$DateTime <- as.POSIXct(meter_data$DateTime, "%Y/%m/%d %H:%M:%S")
attr(meter_data$DateTime, "tzone") <- "Europe/Paris"
meter_data_train <- meter_data[meter_data$Year != 2010,]
write.csv(meter_data_train, file = 'minutedata.csv')
write.csv(meter_data, file = 'minutedata.csv')
meter_data <- meter_data[,-c(2,3)]
write.csv(meter_data, file = 'minutedata.csv')
meter_data <- subset(meter_data, DateTime$Year == 2009 and DateTime$Month ==12
meter_data <- subset(meter_data, DateTime$Year == 2009 & DateTime$Month ==12)
meter_data <- subset(meter_data, DateTime@Year == 2009 & DateTime@Month ==12)
meter_data$DateTime
meter_data <- meter_data[year(meter_data$DateTime) == 2009,]
meter_data <- meter_data[lubridate::year(meter_data$DateTime) == 2009,]
meter_data <- meter_data[lubridate::month(meter_data$DateTime) == 12,]
minutedata_dec09 <- gather(meter_data, key = meter, values = 'consumption',
Kitchen, `Hot water/AC`, `Laundry Room`, Other, Total)
minutedata_dec09 <- gather(meter_data, key = meter, values = 'consumption',
Kitchen, `Laundry Room`, Other, Total)
minutedata_dec09 <- gather(meter_data, key = meter, values = 'consumption',
Kitchen, Other, Total)
minutedata_dec09 <- gather(meter_data, key = 'meter', values = 'consumption',
Kitchen, `Hot water/AC`, `Laundry Room`, Other, Total)
minutedata_dec09 <- gather(meter_data, key = 'meter', values = 'consumption',
Kitchen, `Hot water/AC`, `Laundry Room`, Other, Total)
?gather
minutedata_dec09 <- gather(meter_data, key = 'meter', value = 'consumption',
Kitchen, `Hot water/AC`, `Laundry Room`, Other, Total)
write.csv(minutedata_dec09, file = 'minutedata.csv')
View(minutedata_dec09)
nrow(minutedata_dec09)
nrow(subset(minutedata_dec09, meter == 'Total')
)
nrow(subset(minutedata_dec09, meter == 'Kitchen')
)
nrow(subset(minutedata_dec09, meter == 'Laundry Room'))
nrow(subset(minutedata_dec09, meter == 'Other'))
write.csv(minutedata_dec09, file = 'minutedata.csv')
write.csv(minutedata_dec09, file = 'minutedata.csv', row.names = NULL)
library(RMySQL)
library(tidyverse)
library(plotly)
library(makeR)
library(forecast)
library(prophet)
library(Metrics)
####load data and merge, transform, rename####
con = dbConnect(MySQL(), user='deepAnalytics', password='Sqltask1234!', dbname='dataanalytics2018', host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
dbListTables(con)
dbListFields(con, 'yr_2009')
yr_2006 <- dbGetQuery(con, "SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2006")
yr_2007 <- dbGetQuery(con, "SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2007")
yr_2008 <- dbGetQuery(con, "SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2008")
yr_2009 <- dbGetQuery(con, "SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2009")
yr_2010 <- dbGetQuery(con, "SELECT Date, Time, Global_active_power, Sub_metering_1, Sub_metering_2, Sub_metering_3 FROM yr_2010")
meter_data <- rbind(yr_2007, yr_2008, yr_2009, yr_2010)
meter_data$Global_active_power <- meter_data$Global_active_power *100/6
meter_data$Other <- meter_data$Global_active_power - meter_data$Sub_metering_1 - meter_data$Sub_metering_2 - meter_data$Sub_metering_3
colnames(meter_data)[c(3:7)] <- c('Total','Kitchen','Laundry Room','Hot water/AC','Other')
####read date and time and gather the DF
meter_data <-cbind(meter_data,paste(meter_data$Date,meter_data$Time), stringsAsFactors=FALSE)
colnames(meter_data)[8] <-"DateTime"
meter_data <- meter_data[,c(ncol(meter_data), 1:(ncol(meter_data)-1))]
meter_data$DateTime <- as.POSIXct(meter_data$DateTime, "%Y/%m/%d %H:%M:%S")
attr(meter_data$DateTime, "tzone") <- "Europe/Paris"
meter_data$Weekday <- factor(lubridate::wday(meter_data$DateTime, week_start = 1, label = TRUE))
meter_data$Week <- lubridate::isoweek(meter_data$DateTime)
meter_data$Year <- lubridate::year(meter_data$DateTime)
meter_data$Month <- lubridate::month(meter_data$DateTime)
meter_data$Day <- lubridate::day(meter_data$DateTime)
meter_data$Hour <- lubridate::hour(meter_data$DateTime)
meter_data$Minute <- lubridate::minute(meter_data$DateTime)
meter_data$Date <- strftime(meter_data$DateTime, format= "%F")
meter_data$Time <- strftime(meter_data$DateTime, format= "%H:%M")
meter_data_test <- meter_data[meter_data$Year == 2010,]
meter_data_train <- meter_data[meter_data$Year != 2010,]
####make some plots####
#a calendar with total consumption
meter_total_byday <- meter_data %>% group_by(Date, Year, Month, Day) %>%
summarize(Total = mean(Total),
Kitchen = mean(Kitchen),
`Laundry Room` = mean(`Laundry Room`),
`Hot water/AC` = mean(`Hot water/AC`),
Other = mean(Other))
calendarHeat(meter_total_byday$Date, meter_total_byday$Total, varname = 'Total Consumption')
calendarHeat(meter_total_byday$Date, meter_total_byday$Kitchen, varname = 'Kitchen Consumption')
calendarHeat(meter_total_byday$Date, meter_total_byday$`Laundry Room`, varname = 'Laundry Room Consumption')
calendarHeat(meter_total_byday$Date, meter_total_byday$`Hot water/AC`, varname = 'Hot water/AC Consumption')
calendarHeat(meter_total_byday$Date, meter_total_byday$Other, varname = 'Other Consumption')
####granularizing the data####
granular_data <- list()
granular_data[['Hour']] <- meter_data %>% group_by(Year, Month, Day, Hour, Week, Weekday) %>%
summarize (Kitchen = sum(Kitchen)/1000,
`Laundry Room` = sum(`Laundry Room`)/1000,
`Hot water/AC` = sum(`Hot water/AC`)/1000,
Other = sum(Other)/1000,
Total = sum(Total)/1000)
granular_data$Hour$ds <- lubridate::ymd_h(paste(granular_data$Hour$Year,
granular_data$Hour$Month,
granular_data$Hour$Day,
granular_data$Hour$Hour))
granular_data[['Day']] <- meter_data %>% group_by(Year, Month, Day, Week, Weekday) %>%
summarize (Kitchen = sum(Kitchen)/1000,
`Laundry Room` = sum(`Laundry Room`)/1000,
`Hot water/AC` = sum(`Hot water/AC`)/1000,
Other = sum(Other)/1000,
Total = sum(Total)/1000)
granular_data$Day$ds <- lubridate::ymd(paste(granular_data$Day$Year,
granular_data$Day$Month,
granular_data$Day$Day))
granular_data[['Week']] <- meter_data %>% group_by(Year, Week) %>%
summarize (Kitchen = sum(Kitchen)/1000,
`Laundry Room` = sum(`Laundry Room`)/1000,
`Hot water/AC` = sum(`Hot water/AC`)/1000,
Other = sum(Other)/1000,
Total = sum(Total)/1000,
ds = min(DateTime))
granular_data[['Month']] <- meter_data %>% group_by(Year, Month) %>%
summarize (Kitchen = sum(Kitchen)/1000,
`Laundry Room` = sum(`Laundry Room`)/1000,
`Hot water/AC` = sum(`Hot water/AC`)/1000,
Other = sum(Other)/1000,
Total = sum(Total)/1000)
granular_data$Month$ds <- lubridate::ymd(paste(granular_data$Month$Year,
granular_data$Month$Month, "1"))
#save(granular_data, file = 'granulardata.Rdata')
grans <- c('Hour','Day', 'Week', 'Month')
rooms <- c('Kitchen', 'Laundry Room', 'Hot water/AC', 'Other')
granular_data_test <- lapply(granular_data, function(x) subset(x, Year == 2010))
granular_data <- lapply(granular_data, function(x) subset(x, Year != 2010))
####prophet daily forecasts with and w/o holidays####
prophetdataday <- list()
timedf <- granular_data[['Day']]$ds
for (i in rooms) {
prophetdataday[[i]] <- granular_data[['Day']][i]
prophetdataday[[i]] <- cbind(timedf, prophetdataday[[i]])
colnames(prophetdataday[[i]]) <- c('ds','y')
}
##without holidays
prophet_nohol <- lapply(prophetdataday, prophet)
#save(prophet_nohol, file = "prophet_dailymodels_nohol.Rdata")
#load("prophet_dailymodels_nohol.Rdata")
futures_nohol <- lapply(prophet_nohol, function(x) make_future_dataframe(x,periods = 365))
forecast_nohol <- map2(prophet_nohol, futures_nohol, function(x,y) predict(x,y))
forecast_nohol_futureonly <- lapply(forecast_nohol,
function(x) subset(x, lubridate::year(ds) == 2010,
select = c(ds, yhat)))
##with holidays
prophet_h <- prophet(weekly.seasonality = TRUE, yearly.seasonality = TRUE)
prophet_h <- add_country_holidays(prophet_h, country_name = 'France')
prophet_hol <- lapply(prophetdataday, function(x) fit.prophet(m = prophet_h, df = x))
#save(prophet_hol, file = "prophet_dailymodels_hol.Rdata")
#load("prophet_dailymodels_hol.Rdata")
futures_hol <- lapply(prophet_hol, function(x) make_future_dataframe(x,periods = 365))
forecast_hol <- map2(prophet_hol, futures_hol, function(x,y) predict(x,y))
forecast_hol_futureonly <- lapply(forecast_hol,
function(x) subset(x, lubridate::year(ds) == 2010,
select = c(ds, yhat)))
plot(prophet_hol$Kitchen, forecast_hol$Kitchen)
####creating the test dataframes for 2010####
testdata <- list()
timedf <- as.POSIXct(granular_data_test[['Day']]$ds)
for (i in rooms) {
testdata[[i]] <- granular_data_test[['Day']][i]
testdata[[i]] <- cbind(timedf, testdata[[i]])
colnames(testdata[[i]]) <- c('ds','y')
}
####merge both hol and nohol predictions with testing data####
realpredicteddf <- list()
realpredicteddf <- map2(testdata, forecast_nohol_futureonly,
function(x,y) merge(x,y, by='ds', all=TRUE))
realpredicteddf <- map2(realpredicteddf, forecast_hol_futureonly,
function(x,y) merge(x,y, by='ds', all=TRUE))
for (i in rooms) {
realpredicteddf[[i]]$y[realpredicteddf[[i]]$y==0] <- 0.001
}
for (i in rooms) {
colnames(realpredicteddf[[i]]) <- c('ds', 'y', 'prophet_nohol', 'prophet_hol')
}
plot(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$y, type='l')
lines(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$prophet_nohol, col = 'red')
lines(realpredicteddf$Kitchen$ds, realpredicteddf$Kitchen$prophet_hol, col = 'blue')
####plotting all the plots in a single ggplot
realpredicteddf_expand <- lapply(realpredicteddf,
function(x) pivot_longer(x,
cols = -ds,
names_to = 'model',
values_to = 'y'))
for (i in rooms) {
realpredicteddf_expand[[i]]$meter <- i
}
dataexpanded <- do.call('rbind', realpredicteddf_expand)
a <- ggplot(data = dataexpanded, aes(x = ds, y = y, color = model)) +
geom_line() +
facet_grid(vars(meter)) +
scale_color_hue(labels = c('prophet with holidays', 'prophet', 'real data'))
a
####calculating stats for prophet
realpredicteddf_narm <- lapply(realpredicteddf, na.omit)
modelstats <- data_frame(meter = rooms)
modelstats$nohol_rmse <- sapply(realpredicteddf_narm,
function(x) Metrics::rmse(x$y, x$prophet_nohol))
modelstats$nohol_mae <- sapply(realpredicteddf_narm,
function(x) Metrics::mae(x$y, x$prophet_nohol))
modelstats$nohol_mape <- sapply(realpredicteddf_narm,
function(x) Metrics::mape(x$y + 1, x$prophet_nohol + 1))
modelstats$hol_rmse <- sapply(realpredicteddf_narm,
function(x) Metrics::rmse(x$y, x$prophet_hol))
modelstats$hol_mae <- sapply(realpredicteddf_narm,
function(x) Metrics::mae(x$y, x$prophet_hol))
modelstats$hol_mape <- sapply(realpredicteddf_narm,
function(x) Metrics::mape(x$y + 1, x$prophet_hol + 1))
####builting time series objects for other models
granular_data_hour_reduced <- granular_data[['Day']][,c('Kitchen','Laundry Room', 'Hot water/AC','Other')]
gran_data_ts <- list()
gran_data_ts2 <- list()
for (i in rooms){
gran_data_ts[[i]] = ts(granular_data[['Day']][i], start = 2007, frequency = 365)
}
for (i in rooms){
gran_data_ts2[[i]] = ts(granular_data[['Day']][i], start = 2007, frequency = 7)
}
####linear models
linmodels <- lapply(gran_data_ts, function(x) tslm(x ~ trend + season))
forecast_linmodels <- lapply(linmodels, function(x) forecast(x, h=365))
forecast_linmodels_preds <- list()
for (i in rooms) {
forecast_linmodels_preds[[i]] <- as.data.frame(forecast_linmodels[[i]]$mean)
colnames(forecast_linmodels_preds[[i]]) <- 'linmodel'
}
forecast_linmodels_preds <- map2(realpredicteddf, forecast_linmodels_preds, cbind)
forecast_linmodels_preds_narm <- lapply(forecast_linmodels_preds, na.omit)
#linmodels stats
modelstats$linmodel_rmse <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::rmse(x$y, x$linmodel))
modelstats$linmodel_mae <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::mae(x$y, x$linmodel))
modelstats$linmodel_mape <- sapply(forecast_linmodels_preds_narm, function(x) Metrics::mape(x$y + 1, x$linmodel + 1))
####arima auto
autoarimas <- lapply(list(Kitchen = gran_data_ts$Kitchen,
`Laundry Room` = gran_data_ts$`Laundry Room`,
`Hot water/AC` = gran_data_ts$`Hot water/AC`),
function(x) auto.arima(x))
forecast_autoarimas <- lapply(autoarimas, function(x) forecast(x, h=365))
forecast_autoarimas_preds <- list()
for (i in rooms[1:3]) {
forecast_autoarimas_preds[[i]] <- as.data.frame(forecast_autoarimas[[i]]$mean)
colnames(forecast_autoarimas_preds[[i]]) <- 'autoarima'
}
realpredicteddf2 <- list(Kitchen = realpredicteddf$Kitchen,
`Laundry Room` = realpredicteddf$`Laundry Room`,
`Hot water/AC` = realpredicteddf$`Hot water/AC`)
forecast_autoarimas_preds <- map2(realpredicteddf2, forecast_autoarimas_preds, cbind)
forecast_autoarimas_preds_narm <- lapply(forecast_autoarimas_preds, na.omit)
#autoarima stats
modelstats$autoarima_rmse <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::rmse(x$y, x$autoarima)), 0)
modelstats$autoarima_mae <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::mae(x$y, x$autoarima)), 0)
modelstats$autoarima_mape <- c(sapply(forecast_autoarimas_preds_narm, function(x) Metrics::mape(x$y + 1, x$autoarima + 1)), 0)
####holt-winters
holtwinterss <- lapply(gran_data_ts, function(x) HoltWinters(x))
forecast_holtwinters <- lapply(holtwinterss, function(x) forecast(x, h=365))
forecast_holtwinters_preds <- list()
for (i in rooms) {
forecast_holtwinters_preds[[i]] <- as.data.frame(forecast_holtwinters[[i]]$mean)
colnames(forecast_holtwinters_preds[[i]]) <- 'holtwinters'
}
forecast_linmodels_preds <- map2(forecast_linmodels_preds, forecast_holtwinters_preds, cbind)
forecast_linmodels_preds_narm <- lapply(forecast_linmodels_preds, na.omit)
modelstats$holtwinters_rmse <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::rmse(x$y, x$holtwinters)))
modelstats$holtwinters_mae <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::mae(x$y, x$holtwinters)))
modelstats$holtwinters_mape <- c(sapply(forecast_linmodels_preds_narm, function(x) Metrics::mape(x$y + 1, x$holtwinters + 1)))
calendarHeat(meter_total_byday$Date, meter_total_byday$Total, varname = 'Total Consumption')
meter_total_byday <- meter_data %>% group_by(Date, Year, Month, Day) %>%
summarize(Total = sum(Total)/1000,
Kitchen = sum(Kitchen)/1000,
`Laundry Room` = sum(`Laundry Room`)/1000,
`Hot water/AC` = sum(`Hot water/AC`)/1000,
Other = sum(Other)/1000)
calendarHeat(meter_total_byday$Date, meter_total_byday$Total, varname = 'Total Consumption')
View(meter_total_byday)
august19data <- meter_total_byday[596,6:9]
View(august19data)
august19data <- data.frame(cons = meter_total_byday[596,6:9])
View(august19data)
august19data <- t(meter_total_byday[596,6:9])
View(august19data)
august19data$name <- rownames(august19data)
august19data <- data.frame(t(meter_total_byday[596,6:9]))
august19data$name <- rownames(august19data)
View(august19data)
august19data <- data.frame(t(meter_total_byday[596,6:9]))
colnames(august19data) <- consumption
august19data$name <- rownames(august19data)
View(august19data)
august19data <- data.frame(t(meter_total_byday[596,6:9]))
colnames(august19data) <- 'consumption'
august19data$name <- rownames(august19data)
ggplot(data = august19data, aes(x="", y=consumption, fill=name)) +
geom_bar(stat = identity) + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element.blank())
ggplot(data = august19data, aes(x="", y=consumption, fill=name)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element.blank())
ggplot(data = august19data, aes(x="", y=consumption, fill=name)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank())
ggplot(data = august19data, aes(x="", y=consumption, fill=name)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('')
ggplot(data = august19data, aes(x="", y=consumption, fill=name)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank())
august19data <- data.frame(t(meter_total_byday[596,6:9]))
colnames(august19data) <- 'consumption'
august19data$submeter <- rownames(august19data)
ggplot(data = august19data, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank())
meter_data_laundry <- meter_data[,c('Date', 'Laundry Room')]
meter_data_offdays <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(meter_data_offdays) <- c('Date', 'Laundry Room')
bla <- unique(meter_data_laundry$Date)
for (ii in bla) {
tempdata = meter_data_laundry[meter_data_laundry$Date == ii,]
if (max(tempdata$`Laundry Room`) == 2) {
meter_data_offdays <- rbind (meter_data_offdays, tempdata)
}
}
meter_data_offdays_daily <- meter_data_offdays %>% group_by(Date) %>% summarize(`Laundry Room` = sum(`Laundry Room`))
meter_data_offdays_daily$Date <- as.POSIXct(meter_data_offdays_daily$Date)
plot(meter_data_offdays_daily$Date, meter_data_offdays_daily$`Laundry Room`)
meter_data_daily_offrem <- subset(meter_data_offdays_daily, `Laundry Room` < 1000)
plot(meter_data_daily_offrem$Date, meter_data_daily_offrem$`Laundry Room`)
plot(meter_data_daily_offrem$Date, meter_data_daily_offrem$`Laundry Room`, xlab = 'Year', ylab = 'Daily consumption (Wh)')
linfit <- lm(meter_data_daily_offrem$`Laundry Room` ~ meter_data_daily_offrem$Daydiff)
linfit$coefficients[2] * 365
meter_data_daily_offrem$Daydiff <- (meter_data_daily_offrem$Date - meter_data_daily_offrem$Date[1]) / 86400
linfit <- lm(meter_data_daily_offrem$`Laundry Room` ~ meter_data_daily_offrem$Daydiff)
linfit$coefficients[2] * 365
lines(meter_data_daily_offrem$Date, meter_data_daily_offrem$fit, col = 'red')
meter_data_daily_offrem$fit <- meter_data_daily_offrem$Daydiff*linfit$coefficients[2] + linfit$coefficients[1]
lines(meter_data_daily_offrem$Date, meter_data_daily_offrem$fit, col = 'red')
plot(meter_data_laundry$Date[1:1440], meter_data_laundry$`Laundry Room`[1:1440])
View(meter_data_laundry)
meter_data_laundry$Date <- as.POSIXct(meter_data_laundry$Date)
plot(meter_data_laundry$Date[1:1440], meter_data_laundry$`Laundry Room`[1:1440])
meter_data_laundry2 <- meter_data[,c('DateTime', 'Laundry Room')]
plot(meter_data_laundry2$DateTime[1:1440], meter_data_laundry2$`Laundry Room`[1:1440])
plot(meter_data_laundry2$DateTime[1:1440], meter_data_laundry2$`Laundry Room`[1:1440], type = 'l')
plot(meter_data_laundry2$DateTime[1441:28800],
meter_data_laundry2$`Laundry Room`[1441:2880], type = 'l')
plot(meter_data_laundry2$DateTime[1441:2880],
meter_data_laundry2$`Laundry Room`[1441:2880], type = 'l')
plot(meter_data_laundry2$DateTime[1381:2820],
meter_data_laundry2$`Laundry Room`[1381:2820], type = 'l')
plot(meter_data_laundry2$DateTime[1380:2820],
meter_data_laundry2$`Laundry Room`[1380:2820], type = 'l')
plot(meter_data_laundry2$DateTime[1380:2820],
meter_data_laundry2$`Laundry Room`[1380:2820], type = 'l',
xlab = 'hour', ylab = 'energy consumption (Wh)')
load('granulardata.Rdata')
monthly_total <- data.frame(granular_data$Month[c('ds','Total')])
monthly_total_train <- monthly_total[1:36,]
monthly_total_test <- monthly_total[37:47,]
monthly_total_ts <- ts(monthly_total_train$Total, frequency = 12)
#auto arima
autoarima_t <- auto.arima(monthly_total_ts)
autoarima_fc <- forecast(autoarima_t, h = 11)
plot(autoarima_fc)
ggplot(data = montly_total, aes(x = ds, y = Total)) + geom_line()
ggplot(data = monthly_total, aes(x = ds, y = Total)) + geom_line()
monthly_total$data <- ifelse(montly_total$ds < 2010, 'Train' 'Test')
monthly_total$data <- ifelse(montly_total$ds$year < 2010, 'Train' 'Test')
monthly_total$data <- ifelse(montly_total$ds$year < 2010, 'Train', 'Test')
monthly_total$data <- ifelse(monthly_total$ds$year < 2010, 'Train', 'Test')
monthly_total$data <- ifelse(monthly_total$ds < 2010, 'Train', 'Test')
View(monthly_total)
monthly_total$data <- ifelse(monthly_total$ds == 2010, 'Test', 'Train')
monthly_total$data <- ifelse(lubridate::year(monthly_total$ds) == 2010, 'Test', 'Train')
ggplot(data = monthly_total, aes(x = ds, y = Total, size = data)) + geom_line() +
scale_size_manual('Train' = 3, 'Test' = 1)
ggplot(data = monthly_total, aes(x = ds, y = Total, size = data)) + geom_line() +
scale_size_manual(values=c('Train' = 3, 'Test' = 1))
ggplot(data = monthly_total, aes(x = ds, y = Total, color = data, size = data)) +
geom_line() + scale_size_manual(values=c('Train' = 3, 'Test' = 1))
ggplot(data = monthly_total, aes(x = ds, y = Total, color = data, size = data)) +
geom_line() + scale_size_manual(values=c('Train' = 3, 'Test' = 1)) + xlab('Year') +
ylab('Monthly consumption (kWh)')
plot(c(1:11), errors$monthly_total_test.Total, type='l')
#auto arima
autoarima_t <- auto.arima(monthly_total_ts)
autoarima_fc <- forecast(autoarima_t, h = 11)
plot(autoarima_fc)
#holt winters
hws_t <- HoltWinters(monthly_total_ts)
hws_fc <- forecast(hws_t, h = 11)
plot(hws_fc)
#lm
linmodel_t <- tslm(monthly_total_ts ~ trend + season)
linmodel_fc <- forecast(linmodel_t, h = 11)
plot(linmodel_fc)
###error analysis
errors <- data.frame(cbind(monthly_total_test$Total, autoarima_fc$mean, hws_fc$mean, linmodel_fc$mean))
mapes <- c(mape(errors$monthly_total_test.Total, errors$autoarima_fc.mean),
mape(errors$monthly_total_test.Total, errors$hws_fc.mean),
mape(errors$monthly_total_test.Total, errors$linmodel_fc.mean))
plot(c(1:11), errors$monthly_total_test.Total, type='l')
lines(c(1:11), errors$autoarima_fc.mean, col = 'red')
lines(c(1:11), errors$hws_fc.mean, col = 'blue')
lines(c(1:11), errors$linmodel_fc.mean, col = 'green')
errors$`month in 2010` <- c(1:11)
errors <- data.frame(cbind(monthly_total_test$Total, autoarima_fc$mean, hws_fc$mean, linmodel_fc$mean))
colnames(errors) <- c('real data', 'ARIMA auto', 'Holt Winters', 'Linear model')
errors$`month in 2010` <- c(1:11)
errors2 <- gather(errors, key = 'model', value = 'Energy consumption (kWh)',
`real data`, `ARIMA auto`, `Holt Winters`, `Linear model`)
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh`), color = model) +
geom_line()
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model) +
geom_line()
plot(c(1:11), errors$monthly_total_test.Total, type='l')
lines(c(1:11), errors$autoarima_fc.mean, col = 'red')
lines(c(1:11), errors$hws_fc.mean, col = 'blue')
lines(c(1:11), errors$linmodel_fc.mean, col = 'green')
plot(meter_data$`Laundry Room`[1569835:1570835], type = 'l', col = 'red')
lines(meter_data$`Laundry Room`[1:1000], col = 'blue')
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model)) +
geom_line()
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model, size = model)) +
geom_line() + scale_size_manual(values=c('real data' = 1.5))
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model, size = model)) +
geom_line() + scale_size_manual(values=c('real data' = 1.5, 1,1,1))
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model, size = model)) +
geom_line() + scale_size_manual(values=c('real data' = 1.5, `ARIMA auto` = 1,
`Holt Winters` = 1, `Linear Model` = 1))
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model, size = model)) +
geom_line() + scale_size_manual(values=c('real data' = 1.5, `ARIMA auto` = 1,
`Holt Winters` = 1, `Linear model` = 1))
ggplot(data = errors2, aes(x = `month in 2010`, y = `Energy consumption (kWh)`, color = model, size = model)) +
geom_line() + scale_size_manual(values=c('real data' = 2, `ARIMA auto` = 1,
`Holt Winters` = 1, `Linear model` = 1))
ggplot(data = monthly_total, aes(x = ds, y = Total, color = data, size = data)) +
geom_line() + scale_size_manual(values=c('Train' = 3, 'Test' = 1)) + xlab('Year') +
ylab('Monthly consumption (kWh)')
ggplot(data = monthly_total, aes(x = ds, y = Total, color = data, size = data)) +
geom_line() + scale_size_manual(values=c('Train' = 3, 'Test' = 0)) + xlab('Year') +
ylab('Monthly consumption (kWh)')
?apply
sumdata <- apply(meter_total_byday[,6:9], 2, sum)
sumdata2 <- data.frame(t(sumdata))
View(sumdata2)
sumdata <- data.frame(apply(meter_total_byday[,6:9], 2, sum))
View(sumdata)
sumdata <- data.frame(apply(meter_total_byday[,6:9], 2, sum))
colnames(sumdata) <- 'consmuption'
sumdata$submeter <- rownames(sumdata)
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(y = midpoint, label = consumption)
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(label = consumption)
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = consumption))
?geom_text
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text()
sumdata <- data.frame(apply(meter_total_byday[,6:9], 2, sum))
colnames(sumdata) <- 'consumption'
sumdata$submeter <- rownames(sumdata)
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text()
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = consumption))
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + coord_polar('y', start = 0) + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption)))
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') + xlab('') + ylab('') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption)))
ggplot(data = sumdata, aes(x="", y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption)))
ggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(y = cumul, label = round(consumption)))
sumdata$cumul <- cumsum(sumdata$consumption)
ggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(y = cumul, label = round(consumption)))
ggplot(data = sumdata, aes(x='', y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(y = cumul, label = round(consumption)))
ggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption)))
ggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption) + 1000)) +
ylab('total consumption (kWh)')
ggplot(data = sumdata, aes(x=submeter, y=consumption, fill=submeter)) +
geom_bar(stat = 'identity') +
theme(axis.text.x=element_blank()) + geom_text(aes(label = round(consumption),
y = consumption + 1000)) +
ylab('total consumption (kWh)')
ggplot(data = monthly_total, aes(x = ds, y = Total, color = data, size = data)) +
geom_line() + scale_size_manual(values=c('Train' = 3, 'Test' = 1)) + xlab('Year') +
ylab('Monthly consumption (kWh)')
